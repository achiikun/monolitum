<?php

namespace monolitum\bootstrap;

use monolitum\backend\params\Link;
use monolitum\backend\params\Path;
use monolitum\backend\res\Active_Create_HrefResolver;
use monolitum\backend\res\HrefResolver;
use monolitum\bootstrap\values\BSColor;
use monolitum\core\GlobalContext;
use monolitum\core\panic\DevPanic;
use monolitum\core\Renderable_Node;
use monolitum\frontend\component\AbstractText;
use monolitum\frontend\form\Form;
use monolitum\frontend\html\HtmlElement;
use monolitum\frontend\Rendered;

class BSButton extends AbstractText
{

    /**
     * @var Link|Path
     */
    private $href = null;
    
    /**
     * @var HrefResolver
     */
    private $hrefResolver;

    /**
     * @var bool
     */
    private $disabled = false;

    /**
     * @var bool
     */
    private $post = false;

    /**
     * @var Form
     */
    private $form;
    /**
     * @var BS_Form_Submit
     */
    private $formSubmit;

    public function __construct($builder = null)
    {
        parent::__construct(new HtmlElement(null), $builder);
    }

    /**
     * @param BSColor $color
     * @return $this
     */
    public function color($color, $outline = false){
        if($outline)
            $this->addClass("btn-outline-" . $color->getValue());
        else
            $this->addClass("btn-" . $color->getValue());
        return $this;
    }

    /**
     * @param Link|Path $href
     * @return $this
     */
    public function setHref($href)
    {
        $this->href = $href;
        return $this;
    }

    /**
     * @param bool $post
     * @return void
     */
    public function setPost($post=true){
        $this->post = $post;
    }

    /**
     * @param bool $disabled
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->disabled = $disabled;
        return $this;
    }

    protected function afterBuildNode()
    {
        // instance Form if post is set, Form has to be autodisabled when another form is in a parent.
        // when
        if($this->post) {

            if($this->disabled){

                throw new DevPanic("Not supported");

            }else{

                $this->form = Form::anonymous(function (Form $it) {

                    $it->setLink($this->href);

                    $this->formSubmit = BS_Form_Submit::add(function (BS_Form_Submit $it) {

                        $it->setId($this->getId());
                        $it->addClass(...$this->getClasses());

                    });

                });
                $this->buildChild($this->form);
            }

        }

        parent::afterBuildNode(); // TODO: Change the autogenerated stub
    }

    public function render()
    {
        $a = $this->getElement();

        //TODO if it is JS action, set as button
        if($this->form !== null){
            // Href Resolver + Post

//            foreach ($a->getChildElementCollection() as $childElement) {
//                $this->formSubmit->append($childElement);
//            }
            $rc = parent::renderChilds();
            $this->formSubmit->append($rc);
            $toRender = $this->form->render();

        }else {

            if($this->href !== null){

                $active = new Active_Create_HrefResolver($this->href);
                GlobalContext::add($active);
                $this->hrefResolver = $active->getHrefResolver();

                $a->setTag("a");
                $a->addClass("btn");
                $a->setAttribute("role", "button");
                $a->setAttribute("href", $this->hrefResolver->resolve());
                $a->setRequireEndTag(true);
            }else{
                $a->setTag("button");
                $a->addClass("btn");
                $a->setAttribute("type", "button");
                $a->setRequireEndTag(true);
            }

            if($this->disabled){
                $a->addClass("disabled");
                $a->setAttribute("aria-disabled", "true");
            }

            $rc = parent::renderChilds();
            Renderable_Node::renderRenderedTo($rc, $a);

            $toRender = $a;

        }

        return Rendered::of($toRender);

    }

    /**
     * @param string|Renderable_Node $content
     * @return BSButton
     */
    public static function of($content)
    {
        $fc = new BSButton();
        $fc->append($content);
        return $fc;
    }

    /**
     * @param callable $builder
     * @return BSButton
     */
    public static function build($builder = null)
    {
        return new BSButton($builder);
    }

    /**
     * @param callable $builder
     * @return BSButton
     */
    public static function add($builder = null)
    {
        $fc = new BSButton($builder);
        GlobalContext::add($fc);
        return $fc;
    }

}