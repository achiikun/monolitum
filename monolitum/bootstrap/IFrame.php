<?php

namespace monolitum\bootstrap;

use monolitum\core\GlobalContext;
use monolitum\backend\res\Active_Resolve_Res;
use monolitum\backend\params\Path;
use monolitum\backend\res\ResResolver;
use monolitum\frontend\ElementComponent;
use monolitum\frontend\html\HtmlElement;

class IFrame extends ElementComponent
{

    /**
     * @var Path
     */
    private $source;
    /**
     * @var ResResolver
     */
    private $sourceResolver;
    /**
     * @var string
     */
    private $type;

    public function __construct($builder = null)
    {
        parent::__construct((new HtmlElement("iframe"))->setRequireEndTag(true), $builder);
    }

    /**
     * TODO svg
     * @param string $path
     * @return $this
     */
    public function type($path)
    {
        $this->type = $path;
        return $this;
    }

    /**
     * TODO svg
     * @param Path|string $path
     * @return $this
     */
    public function source($path)
    {
        $this->source = $path;
        return $this;
    }

    protected function afterBuildNode()
    {
        if($this->source instanceof Path){
            $active = new Active_Resolve_Res($this->source);
            GlobalContext::add($active);
            $this->sourceResolver = $active->getResResolver();
        }

        parent::afterBuildNode();
    }

    public function render()
    {
        $img = $this->getElement();

        if($this->sourceResolver){
            $img->setAttribute('src', $this->sourceResolver->resolve());
        }else if(is_string($this->source)){
            $img->setAttribute('src', $this->source);
        }

        if(is_string($this->type))
            $img->setAttribute('type', $this->type);

        return parent::render(); // TODO: Change the autogenerated stub
    }

    /**
     * @param callable $builder
     * @return IFrame
     */
    public static function add($builder = null)
    {
        $fc = new IFrame($builder);
        GlobalContext::add($fc);
        return $fc;
    }

}