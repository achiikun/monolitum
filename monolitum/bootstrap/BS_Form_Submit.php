<?php
namespace monolitum\bootstrap;

use monolitum\bootstrap\values\BSColor;
use monolitum\core\GlobalContext;
use monolitum\frontend\form\Form_Submit;
use monolitum\frontend\html\HtmlElement;

class BS_Form_Submit extends Form_Submit
{

    private $colorSet = false;

    public function __construct(callable $builder)
    {
        parent::__construct(new HtmlElement("button"), $builder);
        $this->getElement()->setAttribute("type", "submit");
        $this->getElement()->addClass("btn");
        $this->getElement()->setRequireEndTag(true);
    }

    /**
     * @param BSColor $color
     * @return $this
     */
    public function color($color, $outline = false){
        $this->colorSet = true;
        if($outline)
            $this->addClass("btn-outline-" . $color->getValue());
        else
            $this->addClass("btn-" . $color->getValue());
        return $this;
    }

    protected function buildNode()
    {
        parent::buildNode();
        $this->addClass("btn");
        if(!$this->colorSet)
            $this->addClass("btn-primary");
    }

    protected function afterBuildNode()
    {
        parent::afterBuildNode(); // TODO: Change the autogenerated stub
    }

    public function afterBuildForm()
    {

        $name = $this->getFinalName();
        if(!empty($name)){
            $this->setAttribute("name", $name);
        }

        $method = $this->getFinalCustomFormMethod();
        if($method !== null){
            //$this->setAttribute("formmethod", $method);
        }


        $linkResolver = $this->getFinalCustomLinkResolver();
        if($linkResolver !== null){
            $this->setAttribute("formaction", $linkResolver->resolve(), false);
        }

    }

    /**
     * @param callable $builder
     * @return BS_Form_Submit
     */
    public static function add($builder)
    {
        $fc = new BS_Form_Submit($builder);
        GlobalContext::add($fc);
        return $fc;
    }

}

